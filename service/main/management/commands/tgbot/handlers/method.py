from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery, InputMediaPhoto, Message
from pydantic import ValidationError

from main.management.commands.tgbot.keyboards.inline import navigation_keyboard, promo_keyboard
from main.models import TelegramUser, Banner
from support.models import SupportTicket, FAQ

from main.models import Game


async def checking_existing_user(user_id: int):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        Tuple[TelegramUser, bool]: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω.
    """
    return TelegramUser.objects.filter(
        telegram_id=user_id,
    ).exists()

async def show_navigation(chat_input):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        chat_input (Union[CallbackQuery, Message]): –û–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ CallbackQuery,
        –ª–∏–±–æ Message, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    banner = Banner.objects.filter(level=1).first()
    if isinstance(chat_input, CallbackQuery):
        await chat_input.message.edit_media(
            media=InputMediaPhoto(media=banner.file_id,
                                  caption="‚ö°Ô∏èMonochrome - ¬´–ò–≥—Ä–∞–π. –í—ã–∏–≥—Ä—ã–≤–∞–π. –ü–æ–≤—Ç–æ—Ä—è–π!¬ª üéÆ‚ú®\n"
                                            "üî• –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏"),
            reply_markup=navigation_keyboard()
        )
        await chat_input.answer()  # Acknowledge the callback
    elif isinstance(chat_input, Message):

        await chat_input.answer_photo(
            photo=banner.file_id,
            caption="‚ö°Ô∏èMonochrome - ¬´–ò–≥—Ä–∞–π. –í—ã–∏–≥—Ä—ã–≤–∞–π. –ü–æ–≤—Ç–æ—Ä—è–π!¬ª üéÆ‚ú®\n"
                    "üî• –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏",
            reply_markup=navigation_keyboard()
        )

async def show_promo(chat_input):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        chat_input (Union[CallbackQuery, Message]): –û–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ CallbackQuery,
        –ª–∏–±–æ Message, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    if isinstance(chat_input, CallbackQuery):
        await chat_input.message.edit_media(
            media=InputMediaPhoto(media="https://placehold.co/500x300/png/?text=–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥", caption="–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ (media)"),
        )
        await chat_input.answer()  # Acknowledge the callback
    elif isinstance(chat_input, Message):
        await chat_input.answer(text=
            "üòï –£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
            "‚ú® –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ ‚Äî —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –±–æ–Ω—É—Å—ã.",
            parse_mode="HTML", reply_markup=promo_keyboard()
        )

async def get_or_create_user(user_id: int, username: str, chat_id: int, referrer_id: str = None):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
        referrer_id (str, optional): Telegram ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        Tuple[TelegramUser, bool]: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω.
    """
    return await TelegramUser.objects.aget_or_create(
        telegram_id=user_id,
        defaults={
            'username': username,
            'referer': referrer_id if referrer_id else None,
        }
    )

async def get_user_tg(user_id: int):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
        referrer_id (str, optional): Telegram ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        Tuple[TelegramUser, bool]: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω.
    """
    user_id = TelegramUser.objects.filter(telegram_id=user_id).first()
    return user_id


async def notify_user_referrer(referrer_id: str, username: str, bot: Bot):
    try:
        await bot.send_message(
            referrer_id,
            f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n–í–∞—à –¥—Ä—É–≥: @{username}"
        )
    except Exception:
        pass

async def get_avatar(bot, user_id):
    try:
        user_photos = await bot.get_user_profile_photos(user_id, limit=1)
        if user_photos.photos:
            return user_photos.photos[0][-1].file_id
        else:
            raise ValueError("–ê–≤–∞—Ç–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    except (TelegramBadRequest, ValueError):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return 'AgACAgIAAxkBAAIDtGcfs6JJWnyzeXQzrtHYvTxYtzGUAAKo6DEbOxoAAUmsjpAeViz_kAEAAwIAA3gAAzYE'


async def get_user_balance(user_id: int):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        float: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    account = TelegramUser.objects.filter(telegram_id=user_id).first()
    return account.balance

async def get_faq():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        float: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    faq = FAQ.objects.filter(is_active=True)
    return faq

async def get_answer_for_faq(callback_data: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        float: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    try:
        faq = FAQ.objects.get(callback_data=callback_data)
        return faq
    except (IndexError, ValueError, FAQ.DoesNotExist):
        return "–û—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."

async def create_support_ticket( ticket_type, user, description):
    telegram = await get_user_tg(user)
    description = str(description)

    try:
        ticket = SupportTicket.create_ticket(user, ticket_type, description)
        return f"–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: {ticket.id}\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–∫–æ—Ä–æ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è —Å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π. üõ†Ô∏è"
    except ValidationError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")

async def games_list():
    try:
        games = Game.objects.filter(is_active=True)
        return games
    except Game.DoesNotExist as e:
        print(e.message)