from aiogram import F, Router
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InputMediaPhoto

from main.management.commands.tgbot.factory.profile import ProfileCbData, ProfileActions
from main.management.commands.tgbot.handlers.method import get_user_balance
from main.management.commands.tgbot.handlers.profile.profile import router
from main.management.commands.tgbot.keyboards.profile_inline import my_account_keyboard, transaction_history_keyboard
from main.models import TransactionHistory


@router.callback_query(ProfileCbData.filter(F.action == ProfileActions.account))
async def my_account_handler(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    try:
        account_balance = await get_user_balance(user_id)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
        currency = "USD"
        withdrawal_limit = 500  # –ü—Ä–∏–º–µ—Ä –ª–∏–º–∏—Ç–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
        last_transaction = "+250"
        transaction_type = "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        account_caption = (
            "<b>üíº –í–∞—à —Å—á—ë—Ç:</b>\n\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{account_balance:.2f} {currency}</code>\n"
            f"üîì <b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> <code>{withdrawal_limit:.2f} {currency}/–¥–µ–Ω—å</code>\n"
            f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> <code>{last_transaction} {currency}</code> ({transaction_type})\n\n"
        )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback_query.message.edit_media(
            media=InputMediaPhoto(
                media="https://placehold.co/500x300/png/?text=–ú–æ–π+—Å—á–µ—Ç",
                caption=account_caption,
                parse_mode="HTML"
            ),
            reply_markup=my_account_keyboard()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

    except TelegramAPIError as e:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á—ë—Ç–µ.", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
    except Exception as e:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—á—ë—Ç–µ.", show_alert=True)
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

@router.callback_query(lambda c: c.data == 'transaction_history')
async def transaction_history(callback_query: CallbackQuery):
    try:
        # Retrieve the transaction history for the user
        transactions = TransactionHistory.objects.filter(user__telegram_id=callback_query.from_user.id).order_by('-created_at')
        print(transactions)

        if not transactions.exists():
            await callback_query.message.delete()
            await callback_query.message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞.")
            return

        # Build a message with the transaction details
        transaction_messages = []
        for transaction in transactions:
            transaction_messages.append(
                f"üóì {transaction.created_at.strftime('%Y-%m-%d %H:%M')}\n"
                f"üíµ –°—É–º–º–∞: {transaction.amount} ‚ÇΩ\n"
                f"üìã –¢–∏–ø: {'–ö—Ä–µ–¥–∏—Ç' if transaction.amount > 0 else '–î–µ–±–µ—Ç'}\n"
                f"‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {transaction.transaction_type}\n"
                "------------------------------------"
            )

        # Join the transaction messages
        transaction_text = "\n\n".join(transaction_messages)

        # Send the transaction history to the user
        await callback_query.message.answer(
            f"üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n{transaction_text}",
            reply_markup=transaction_history_keyboard()
        )

    except Exception as e:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        print(f"Error in transaction_history: {e}")
