from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from django.contrib.auth import get_user
from django.template.context_processors import media

from main.management.commands.tgbot.factory.support import SupportCbData, SupportActions, MyRequestsCbData, \
    MyRequestsActions
from main.management.commands.tgbot.keyboards.inline import my_requests_keyboard
from main.management.commands.tgbot.misc.states import WithdrawalState

from deposit_withdrawal.models import WithdrawalRequest

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(SupportCbData.filter(F.action == SupportActions.support_history))
async def request_custom_deposit_amount(callback_query: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback_query.from_user.id
    requests = WithdrawalRequest.objects.filter(user__telegram_id=user_id).order_by('-created_at')

    if not requests.exists():
        await callback_query.message.edit_media(media=InputMediaPhoto(media="https://placehold.co/500x500/png", caption="üìù –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤."),
            reply_markup=my_requests_keyboard()
        )
        return

    message_text = "üìÑ <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:</b>\n\n"
    for req in requests:
        notes = "123"
        print(req.get_status_display())

        if (req.get_status_display() == "–û–¥–æ–±—Ä–µ–Ω–∞"):
            print(req.method)
            match req.method:
                case "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞":
                    notes = f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —Ç–µ–º–æ–π ¬´–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ #REQ_PAYMENT_{req.id}¬ª –∏ —É–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞. –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ —É—á–∞—Å—Ç–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.</b>"
                case "–∫–∞—Ä—Ç–∞":
                    notes = f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —Ç–µ–º–æ–π ¬´–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ #REQ_PAYMENT_{req.id}¬ª –∏ —É–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã. –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ —É—á–∞—Å—Ç–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.</b>"
                case _:
                    notes = f"123"

        else:
            notes = req.notes
        message_text += (
            f"üÜî –ó–∞—è–≤–∫–∞ #{req.id}\n"
            f"üíµ –°—É–º–º–∞: {req.amount} —Ä—É–±.\n"
            f"üì§ –ú–µ—Ç–æ–¥: {req.method}\n"
            f"üì§ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {notes}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {req.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: <b>{req.get_status_display()}</b>\n\n"
        )

    await callback_query.message.edit_media(media=InputMediaPhoto(media="https://placeholder.co/500x500", caption=message_text),
                                            reply_markup=my_requests_keyboard(), parse_mode="HTML")
    await state.set_state(WithdrawalState.enter_amount)


@router.callback_query(lambda c: c.data == "my_requests")
async def show_my_requests(callback_query: CallbackQuery):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback_query.from_user.id
    requests = WithdrawalRequest.objects.filter(user__telegram_id=user_id).order_by('-created_at')

    if not requests.exists():
        await callback_query.message.edit_text(
            "üìù –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.",
            reply_markup=my_requests_keyboard()
        )
        return

    message_text = "üìÑ <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:</b>\n\n"
    for req in requests:
        message_text += (
            f"üÜî –ó–∞—è–≤–∫–∞ #{req.id}\n"
            f"üíµ –°—É–º–º–∞: {req.amount} —Ä—É–±.\n"
            f"üì§ –ú–µ—Ç–æ–¥: {req.method}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {req.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: <b>{req.get_status_display()}</b>\n\n"
        )

    await callback_query.message.edit_media(media=InputMediaPhoto(media="https://placeholder.co/500x500", caption=message_text),
                                            reply_markup=my_requests_keyboard(), parse_mode="HTML")


@router.callback_query(MyRequestsCbData.filter(F.action == MyRequestsActions.refresh))
async def refresh_my_requests(callback_query: CallbackQuery):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫.
    """
    await show_my_requests(callback_query)