from random import random
import asyncio
import random

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from main.management.commands.tgbot.handlers.games.factory import GameCbData, GameActions
from main.management.commands.tgbot.misc.states import Chests
from main.models import TelegramUser

router = Router()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω–µ–π
LEVELS = {
    1: {"buttons_count": 3, "winning_buttons": 1},
    2: {"buttons_count": 4, "winning_buttons": 1},
    3: {"buttons_count": 5, "winning_buttons": 1},
    4: {"buttons_count": 6, "winning_buttons": 1},
    5: {"buttons_count": 6, "winning_buttons": 2},
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∏ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö
def generate_buttons(level):
    config = LEVELS[level]
    buttons = [f"–ö–Ω–æ–ø–∫–∞ {i + 1}" for i in range(config["buttons_count"])]
    winning_buttons = random.sample(buttons, config["winning_buttons"])  # –í—ã–±–∏—Ä–∞–µ–º N –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö
    return buttons, winning_buttons
@router.callback_query(Chests.state_1, lambda c: c.data == 'place_bet')
async def start_game(call: CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    current_level = 1
    await state.update_data(level=current_level)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = TelegramUser.objects.filter(telegram_id=call.from_user.id).first()
    if not user:
        await call.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    bet_amount = 1000  # –ü—Ä–∏–º–µ—Ä —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
    if user.balance < bet_amount:
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å—Ç–∞–≤–∫–∏.", show_alert=True)
        return

    # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –±–∞–ª–∞–Ω—Å–∞
    user.balance -= bet_amount
    user.save()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(bet_amount=bet_amount)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ä–æ–≤–Ω—è
    await send_level(call, state)
async def send_level(call: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    user_data = await state.get_data()
    current_level = user_data.get("level", 1)
    bet_amount = user_data.get("bet_amount", 0)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    buttons, winning_buttons = generate_buttons(current_level)
    await state.update_data(winning_buttons=winning_buttons)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å
    user = TelegramUser.objects.filter(telegram_id=call.from_user.id).first()

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    for button in buttons:
        builder.row(InlineKeyboardButton(
            text=button,
            callback_data=f"choice:{button}")
        )
    builder.adjust(3)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.edit_media(
        media=InputMediaPhoto(
            media=f"https://placehold.co/500x300/png/?text=–£—Ä–æ–≤–µ–Ω—å {current_level}",
            caption=f"–£—Ä–æ–≤–µ–Ω—å {current_level}: –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}\n"
                    f"–°—Ç–∞–≤–∫–∞: {bet_amount}",
        ),
        reply_markup=builder.as_markup()
    )

@router.callback_query(lambda c: c.data.startswith("choice:"))
async def handle_choice(call: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    winning_buttons = user_data.get("winning_buttons", [])
    current_level = user_data.get("level", 1)

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_button = call.data.split(":")[1]

    if selected_button in winning_buttons:
        # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        if current_level == 5:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            await call.message.edit_caption(
                caption=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É! –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_button}, –∏ —ç—Ç–æ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–Ω–æ–ø–∫–∞!",
                reply_markup=None
            )
            await state.clear()
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            await state.update_data(level=current_level + 1)
            await call.answer(
                text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_button}, –∏ —ç—Ç–æ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–Ω–æ–ø–∫–∞! –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {current_level + 1}...",
                show_alert=True,
            )
            await send_level(call, state)
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        buttons = [
            [
                InlineKeyboardButton(text="üîÑ –ü—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=GameCbData(action=GameActions.text,  id=1,
                title="–°—É–Ω–¥—É–Ω–∫–∏",
                code="chests",
                min_bet=1000).pack()),
            ],
            [
                InlineKeyboardButton(text="üìã –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="main_menu"),
            ]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await call.message.edit_caption(
            caption="–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
            reply_markup=keyboard
        )
        await state.clear()