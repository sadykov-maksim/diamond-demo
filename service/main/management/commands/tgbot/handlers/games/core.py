import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils import markdown
from aiogram.utils.keyboard import InlineKeyboardBuilder

from diamond.settings import MEDIA_URL
from main.management.commands.tgbot.handlers.games.factory import GameActions, GameCbData, GameModeCbData, \
    GameModeActions

from main.management.commands.tgbot.handlers.method import games_list

from main.management.commands.tgbot.keyboards.inline import MenuCbData, MenuActions, roulette_keyboard, \
    barrels_keyboard
from main.management.commands.tgbot.misc.states import Form, Roulette, Chests
from main.models import TelegramUser, Game

router = Router()


@router.callback_query(GameCbData.filter(F.action == GameActions.details))
async def show_options(call: CallbackQuery, callback_data: GameCbData, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    telegram_user = await (
        TelegramUser.objects.filter(telegram_id=call.from_user.id).afirst())
    if not telegram_user:
        await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å—Ç–∞–≤–∫–∏
    min_bet = 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã
    if telegram_user.balance < min_bet:
        await call.message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {telegram_user.balance}\n"
                                            "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        return


    match callback_data.code:
        case "faad84f0":
            await call.message.edit_media(
                media=InputMediaPhoto(media="https://placehold.co/500x300/png/?text=–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–∂–∏–º",
                                      caption=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É {callback_data.title}! üéâ\n"
                                              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!\n"
                                              "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):"),
                reply_markup=product_details_kb(callback_data))
            await state.set_state(Form.state_1)
        case "0337b770":
            await call.message.edit_media(
                media=InputMediaPhoto(media="https://placehold.co/500x300/png/?text=–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–∂–∏–º",
                                      caption=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '{callback_data.title}'!"
                                              f" –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É."),
                reply_markup=product_details_kb(callback_data))
        case "chests":
            await call.message.edit_media(
                media=InputMediaPhoto(media="https://placehold.co/500x300/png/?text=–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–∂–∏–º",
                                      caption=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '{callback_data.title}'!"
                                              f" –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É."),
                reply_markup=product_details_kb(callback_data))
            await state.set_state(Chests.state_1)

        case _:
            await call.message.edit_media(
                media=InputMediaPhoto(media="https://placeholder.co/500x500",
                                      caption="–ò–≥—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"))



@router.callback_query(GameCbData.filter(F.action == GameActions.text))
async def handle_product_details_button(call: CallbackQuery, callback_data: GameCbData, state: FSMContext):
    await call.answer()

    telegram_user = await (
        TelegramUser.objects.filter(telegram_id=call.from_user.id).afirst())
    if not telegram_user:
        await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    min_bet = callback_data.min_bet
    if telegram_user.balance < min_bet:
        await call.message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {telegram_user.balance}\n"
                                            "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", show_alert=True)
        return


    match callback_data.code:
        case "faad84f0":
            await call.message.edit_media(
                media=InputMediaPhoto(media="https://placehold.co/500x300/png/?text=–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–∂–∏–º",
                                      caption=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É {callback_data.title}! üéâ\n"
                                              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!\n"
                                              "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):"),
                )
            await state.set_state(Form.state_1)
        case "0337b770":
            await call.message.edit_media(
                media=InputMediaPhoto(media="https://placehold.co/500x300/png/?text=–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–∂–∏–º",
                                      caption=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É {callback_data.title}! üéâ\n"
                                              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!\n"
                                              "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):"),
                reply_markup=roulette_keyboard())
            await state.set_state(Roulette.state_1)

        case "chests":
            game = Game.objects.filter(is_active=True).first()

            if not game or not game.banner:
                await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–Ω–Ω–µ—Ä –¥–ª—è –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            banner_url = game.banner.url

            try:
                print(f"Banner URL: {banner_url}")
                await call.message.edit_media(
                    media=InputMediaPhoto(
                        media=banner_url,
                        caption=(
                            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É {callback_data.title}! üéâ\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!\n"
                            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):"
                        ),
                    ),
                )
                await state.set_state(game.state)
            except Exception as e:
                print(f"Error updating media: {e}")
                await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–Ω–Ω–µ—Ä–∞.")

        case _:
            await call.message.edit_media(
                media=InputMediaPhoto(media="https://placeholder.co/500x500",
                                      caption="–ò–≥—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"))






def build_update_product_kb(
    product_cb_data: GameCbData,
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.button(
        text=f"‚¨ÖÔ∏è back to {product_cb_data.title}",
        callback_data=GameCbData(
            action=GameActions.text,
            **product_cb_data.model_dump(include={"id", "title", "link"}),
        ),
    )
    builder.button(
        text="üîÑ Update",
        callback_data="...",
    )
    return builder.as_markup()

def product_details_kb(
    product_cb_data: GameCbData,
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for label, action in [
        ("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", GameActions.text),
    ]:
        builder.button(
            text=label,
            callback_data=GameCbData(
                action=action,
                **product_cb_data.model_dump(include={"id", "title", "code", "min_bet"}),
            ),
        )

    back = InlineKeyboardButton(text="‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º",  callback_data=MenuCbData(action=MenuActions.mini_games).pack())
    builder.add(back)
    builder.adjust(1,1)
    return builder.as_markup()