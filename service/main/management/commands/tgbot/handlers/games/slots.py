import asyncio
import random

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InputMediaPhoto

from main.management.commands.tgbot.handlers.method import save_game_history
from main.management.commands.tgbot.misc.states import Form
from main.models import TelegramUser, GameHistory

SLOT_SYMBOLS = ["üçí", "üçã", "üçä", "üçâ", "‚≠ê", "üíé"]

router = Router()


@router.message(Form.state_1, F.text)
async def handle_slots_bet(message: Message, state: FSMContext):
    bet_amount = message.text

    if bet_amount.isdigit():
        bet_amount = int(bet_amount)
        telegram_user = await TelegramUser.objects.filter(telegram_id=message.from_user.id).afirst()
        if not telegram_user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if bet_amount > 0 and telegram_user.balance >= bet_amount:
            telegram_user.balance -= bet_amount
            await telegram_user.asave()

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ —Å –∑–∞–º–µ–Ω–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
            await animate_slots(message)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
            result = [random.choice(SLOT_SYMBOLS) for _ in range(3)]
            win_amount = calculate_slots_payout(result, bet_amount)
            if win_amount > 0:
                telegram_user.balance += win_amount
                result_text = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}‚ÇΩ üéâ"
                outcome = "–ü–æ–±–µ–¥–∞"
            else:
                result_text = "–£–≤—ã, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
                outcome = "–ü—Ä–æ–∏–≥—Ä—ã—à"

            await telegram_user.asave()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä—ã
            await save_game_history(telegram_user, "–°–ª–æ—Ç—ã üé∞", bet_amount, win_amount, outcome)

            await message.answer(
                f"üé∞ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {' | '.join(result)} üé∞\n{result_text}\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {telegram_user.balance}‚ÇΩ\n–ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã—Ö–æ–¥–∞."
            )
        else:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
    else:
        await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç–∞–≤–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")


async def animate_slots(message: Message):
    """
    –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤.
    """
    animation_steps = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
    previous_message = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    result = []

    for _ in range(animation_steps):
        spin_result = [random.choice(SLOT_SYMBOLS) for _ in range(3)]

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if previous_message:
            await previous_message.delete()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ "–∫–∞–¥—Ä–∞" –∞–Ω–∏–º–∞—Ü–∏–∏
        previous_message = await message.answer(f"üé∞ {' | '.join(spin_result)} üé∞")
        await asyncio.sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ –∞–Ω–∏–º–∞—Ü–∏–∏

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        result = spin_result

    return result

def calculate_slots_payout(result, bet_amount):
    if result.count(result[0]) == 3:
        return bet_amount * 10
    elif result.count(result[0]) == 2 or result.count(result[1]) == 2:
        return bet_amount * 2
    else:
        return 0
